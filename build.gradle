buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'sonatype-nexus-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = 'forge-repo'
            url = 'http://files.minecraftforge.net/maven/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

// Gradle plugins
plugins {
    id "maven"
    id "signing"
}

apply plugin: 'forge'

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'sonatype-nexus-public'
        url = 'https://oss.sonatype.org/content/repositories/public/'
    }
}

// Project dependencies
dependencies {
}

// Gradle default tasks
defaultTasks 'build'

// Basic project information
group = 'net.malisis'
archivesBaseName = 'malisiscore'
version = '1.7.10-0.10.1'
ext.packaging = 'jar'
ext.isReleaseVersion = false

// Extended project information
ext.projectName = 'Malisis\' Core'
ext.description = 'Malisis\' Core is a framework dedicated to simplify many processes required during a mod development.'
ext.url = 'http://github.com/ordinastie/malisiscore'

// Java version target/source compatibility
sourceCompatibility = '1.7'
targetCompatibility = '1.7'

// Compilation variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// MinecraftForge version
minecraft {
    version = "1.7.10-10.13.2.1230"
    if(file("../../run").exists()) 
		runDir = "../../run/assets"
	else
		runDir = "run/assets"
}

// Filter, process, and include resources
processResources {
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // Include in final JAR
    from 'LICENSE.txt'

    // Replace variables
    from('resources/mcmod.info') {
        expand 'modid': archivesBaseName,
                'name': projectName,
                'description': project.ext.description,
                'version': version,
                'buildNumber': buildNumber,
                'mcversion': minecraft.version,
                'url': url
    }
}

// JAR manifest configuration
jar.manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": name,
        "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
        "Implementation-Vendor": url,
        "FMLCorePlugin": "net.malisis.core.asm.MalisisCorePlugin")

// Artifact deployment
uploadArchives {
    repositories.mavenDeployer {
        // Javadoc JAR generation
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        // Source JAR generation
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.java.srcDirs
        }

        // Create a JAR based on deobfuscated code
        task deobfJar(type: Jar) {
            from sourceSets.main.output
            classifier = 'dev'
        }

        // Set all artifacts
        artifacts {
            archives deobfJar, sourcesJar
        }

        // Tasks and variables based on if release or snapshot
        if (!isReleaseVersion) {
            // Set variable to snapshots repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
        } else {
            // Set variable to releases repository URL
            ext.sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

            // Deployment signing
            signing {
                // Check if uploadArchives task is used
                required { gradle.taskGraph.hasTask("uploadArchives") }

                // Sign JAR artifacts
                sign configurations.archives

                // Sign Maven POM
                beforeDeployment {
                    org.gradle.api.artifacts.maven.MavenDeployment deployment -> signing.signPom(deployment)
                }
            }
        }

        // Set login credentials for repository
        repository(url: sonatypeUrl) {
            authentication(userName: System.getenv("sonatypeUsername"), password: System.getenv("sonatypePassword"))
        }

        // Maven POM generation
        pom.project {
            name projectName
            artifactId archivesBaseName
            packaging packaging
            url url
            description project.ext.description

            scm {
                connection 'scm:git:git://github.com/Ordinastie/MalisisCore.git'
                developerConnection 'scm:git:ssh://git@github.com:Ordinastie/MalisisCore.git'
                url 'https://github.com/Ordinastie/MalisisCore'
            }

            licenses {
                license {
                    name 'The MIT License'
                    url 'http://www.tldrlegal.com/license/mit-license'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'Ordinastie'
                    name 'Ordinastie'
                }
            }

            issueManagement {
                system 'github'
                url 'https://github.com/Ordinastie/MalisisCore/issues'
            }
        }
    }
}
